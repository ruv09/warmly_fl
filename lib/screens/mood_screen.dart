import 'dart:math';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class MoodScreen extends StatefulWidget {
  const MoodScreen({super.key});

  @override
  State<MoodScreen> createState() => _MoodScreenState();
}

class _MoodScreenState extends State<MoodScreen> {
  String? mood; // good | ok | bad
  String? phrase;

  Future<void> _saveFavorite(String text) async {
    final prefs = await SharedPreferences.getInstance();
    final list = prefs.getStringList('favorites') ?? [];
    list.add('${DateTime.now().toIso8601String()}|$text');
    await prefs.setStringList('favorites', list);
    if (mounted) Navigator.pop(context);
  }

  void pickPhrase(String m) {
    final pool = m == 'good' ? _phrasesGood : (m == 'ok' ? _phrasesOk : _phrasesBad);
    setState(() {
      mood = m;
      phrase = pool[Random().nextInt(pool.length)];
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Wrap(
              spacing: 12,
              children: [
                ChoiceChip(label: const Text('üòä –•–æ—Ä–æ—à–æ'), selected: mood=='good', onSelected: (_) => pickPhrase('good')),
                ChoiceChip(label: const Text('üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ'), selected: mood=='ok', onSelected: (_) => pickPhrase('ok')),
                ChoiceChip(label: const Text('üòû –ü–ª–æ—Ö–æ'), selected: mood=='bad', onSelected: (_) => pickPhrase('bad')),
              ],
            ),
            const SizedBox(height: 16),
            if (phrase != null)
              Expanded(
                child: Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(16)),
                  child: Center(
                    child: Text(phrase!, textAlign: TextAlign.center, style: const TextStyle(fontSize: 20, fontStyle: FontStyle.italic)),
                  ),
                ),
              ),
            const SizedBox(height: 16),
            if (phrase != null)
              ElevatedButton(onPressed: () => _saveFavorite(phrase!), child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤ ‚ù§Ô∏è')),
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')),
          ],
        ),
      ),
    );
  }
}

const _phrasesGood = [
  '–°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ –æ—â—É—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ —Ç–≤–æ—ë.',
  '–ü–æ–¥–µ–ª–∏—Å—å —Ç–µ–ø–ª–æ–º —Å —Å–æ–±–æ–π –±—É–¥—É—â–∏–º.',
  '–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –º—è–≥–∫–∏–º –∏ —è—Å–Ω—ã–º.',
];

const _phrasesOk = [
  '–ù–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.',
  '–®–∞–≥ –∑–∞ —à–∞–≥–æ–º. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è.',
  '–°–¥–µ–ª–∞–π –º—è–≥–∫–∏–π –≤–¥–æ—Ö. –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.',
];

const _phrasesBad = [
  '–ï—Å–ª–∏ —Ç—è–∂–µ–ª–æ ‚Äî —ç—Ç–æ –Ω–µ –Ω–∞–≤—Å–µ–≥–¥–∞. –¢—ã –Ω–µ –æ–¥–∏–Ω.',
  '–ú–æ–∂–Ω–æ –æ–ø–µ—Ä–µ—Ç—å—Å—è –Ω–∞ —Å–µ–±—è. –¢–∏—Ö–æ –∏ –±–µ—Ä–µ–∂–Ω–æ.',
  '–¢—ã —Ü–µ–Ω–µ–Ω –¥–∞–∂–µ –≤ —Å–∞–º—ã–µ —Ç—è–∂—ë–ª—ã–µ –¥–Ω–∏.',
];