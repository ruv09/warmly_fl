#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
"""

import os
from typing import Dict, Any

class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        self.DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///warmly_bot.db')
        self.LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
        self.LOG_FILE = os.getenv('LOG_FILE', 'warmly_bot.log')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.DEFAULT_MORNING_TIME = os.getenv('DEFAULT_MORNING_TIME', '08:00')
        self.DEFAULT_EVENING_TIME = os.getenv('DEFAULT_EVENING_TIME', '22:00')
        self.DEFAULT_TIMEZONE = os.getenv('DEFAULT_TIMEZONE', 'Europe/Moscow')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.DB_PATH = 'warmly_bot.db'
        self.MAX_SAVED_PHRASES = 100
        self.ARCHIVE_LIMIT = 50
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        self.BOT_USERNAME = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.BOT_FIRST_NAME = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.BOT_DESCRIPTION = "ü§ç Warmly - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.MESSAGE_TIMEOUT = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.MAX_MESSAGE_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.SCHEDULER_CHECK_INTERVAL = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.NOTIFICATION_RETRY_ATTEMPTS = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        self.SUPPORTED_LANGUAGES = ['ru', 'en']
        self.DEFAULT_LANGUAGE = 'ru'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.ENABLE_STATISTICS = True
        self.STATISTICS_RETENTION_DAYS = 365
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.MAX_MESSAGES_PER_MINUTE = 30  # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.BLOCKED_USERS = []  # –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        self.DEBUG_MODE = os.getenv('DEBUG', 'False').lower() == 'true'
        self.DEVELOPER_MODE = os.getenv('DEVELOPER_MODE', 'False').lower() == 'true'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.ENABLE_HEALTH_CHECK = True
        self.HEALTH_CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.BACKUP_ENABLED = True
        self.BACKUP_INTERVAL = 86400  # 24 —á–∞—Å–∞
        self.BACKUP_RETENTION_DAYS = 7
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.ADMIN_USER_IDS = []  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.ADMIN_NOTIFICATIONS = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API (–µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É–¥—É—â–µ–º)
        self.API_ENABLED = False
        self.API_PORT = 8080
        self.API_HOST = '0.0.0.0'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.CACHE_ENABLED = True
        self.CACHE_TTL = 3600  # 1 —á–∞—Å
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        self.LOG_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
        self.LOG_MAX_SIZE = 10 * 1024 * 1024  # 10 MB
        self.LOG_BACKUP_COUNT = 5
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.DB_CONNECTION_TIMEOUT = 30
        self.DB_QUERY_TIMEOUT = 10
        self.DB_MAX_CONNECTIONS = 10
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        self.TASK_QUEUE_SIZE = 1000
        self.TASK_WORKER_COUNT = 4
        self.TASK_RETRY_DELAY = 60  # —Å–µ–∫—É–Ω–¥—ã
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.NOTIFICATION_BATCH_SIZE = 10
        self.NOTIFICATION_DELAY = 1  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—Ä–∞–∑
        self.PHRASES_ROTATION_ENABLED = True
        self.PHRASES_ROTATION_INTERVAL = 86400  # 24 —á–∞—Å–∞
        self.PHRASES_CACHE_SIZE = 1000
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.INLINE_KEYBOARD_TIMEOUT = 30
        self.CALLBACK_QUERY_TIMEOUT = 30
        self.MESSAGE_EDIT_TIMEOUT = 30
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.RATE_LIMIT_ENABLED = True
        self.RATE_LIMIT_WINDOW = 60  # —Å–µ–∫—É–Ω–¥—ã
        self.RATE_LIMIT_MAX_REQUESTS = 30
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.PERFORMANCE_MONITORING = True
        self.PERFORMANCE_LOG_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.AUTO_UPDATE_ENABLED = False
        self.UPDATE_CHECK_INTERVAL = 86400  # 24 —á–∞—Å–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        self.EXTERNAL_APIS_ENABLED = False
        self.WEATHER_API_KEY = None
        self.NEWS_API_KEY = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.TEST_MODE = False
        self.TEST_USER_IDS = []
        self.MOCK_EXTERNAL_SERVICES = False
    
    def validate(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if not self.TELEGRAM_BOT_TOKEN.startswith(('1', '2', '3', '4', '5', '6', '7', '8', '9')):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN")
        
        if self.LOG_LEVEL not in ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if self.DEFAULT_LANGUAGE not in self.SUPPORTED_LANGUAGES:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        return True
    
    def get_database_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'path': self.DB_PATH,
            'timeout': self.DB_CONNECTION_TIMEOUT,
            'query_timeout': self.DB_QUERY_TIMEOUT,
            'max_connections': self.DB_MAX_CONNECTIONS
        }
    
    def get_logging_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'level': self.LOG_LEVEL,
            'format': self.LOG_FORMAT,
            'date_format': self.LOG_DATE_FORMAT,
            'file': self.LOG_FILE,
            'max_size': self.LOG_MAX_SIZE,
            'backup_count': self.LOG_BACKUP_COUNT
        }
    
    def get_scheduler_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        return {
            'check_interval': self.SCHEDULER_CHECK_INTERVAL,
            'retry_attempts': self.NOTIFICATION_RETRY_ATTEMPTS,
            'batch_size': self.NOTIFICATION_BATCH_SIZE,
            'delay': self.NOTIFICATION_DELAY
        }
    
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        return self.DEBUG_MODE or self.DEVELOPER_MODE
    
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
        return not self.is_development()
    
    def get_user_limits(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            'max_messages_per_minute': self.MAX_MESSAGES_PER_MINUTE,
            'max_saved_phrases': self.MAX_SAVED_PHRASES,
            'archive_limit': self.ARCHIVE_LIMIT
        }

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    config.validate()
except ValueError as e:
    print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)