#!/usr/bin/env python3
"""
Дополнительные функции для Warmly Bot
"""

import random
from datetime import datetime, timedelta
from typing import List, Dict

# Коллекция мотивационных фраз по категориям
MOTIVATION_CATEGORIES = {
    'morning': [
        "Доброе утро! 🌞 Ты уже сделал самое сложное — проснулся.",
        "Новый день — новые возможности! ✨",
        "Ты проснулся, и это уже победа! 🏆",
        "Сегодня будет хороший день, потому что ты в нем! 💫",
        "Ты готов покорять этот день! 💪"
    ],
    'evening': [
        "Спокойной ночи! 🌙 Ты заслуживаешь хорошего отдыха.",
        "Ты прошел через этот день — гордись собой! 🌟",
        "Завтра будет новый шанс быть еще лучше! ✨",
        "Ты сделал все, что мог сегодня — это достаточно! 💕",
        "Отдыхай хорошо, ты это заслужил! 😴"
    ],
    'encouragement': [
        "Ты сильнее, чем думаешь! 💪",
        "Каждый день — это новый шанс! 🌱",
        "Ты не один в своих переживаниях! 🤗",
        "Твоя ценность не зависит от твоих достижений! 💎",
        "Ты заслуживаешь любви просто потому, что существуешь! ❤️"
    ],
    'difficult_times': [
        "Трудные времена не длятся вечно, но сильные люди — да! 💪",
        "Ты переживал трудности раньше и справился — справишься и сейчас! 🌟",
        "Это тоже пройдет, а ты станешь сильнее! ⚡",
        "Ты не один — многие проходили через это! 🤝",
        "Каждая трудность делает тебя мудрее! 🧠"
    ],
    'self_love': [
        "Ты заслуживаешь любви, особенно от самого себя! 💕",
        "Будь добр к себе — ты это заслужил! 🤗",
        "Твоя уникальность — это твоя суперсила! ⚡",
        "Ты достаточно хорош именно таким, какой есть! ✨",
        "Люби себя — ты единственный, кто будет с тобой всю жизнь! 💖"
    ]
}

# Фразы для разных времен года
SEASONAL_PHRASES = {
    'spring': [
        "Весна — время новых начинаний! 🌸",
        "Как природа пробуждается, так и ты можешь начать заново! 🌱",
        "Весеннее солнце согревает душу! ☀️"
    ],
    'summer': [
        "Летнее солнце наполняет энергией! ☀️",
        "Лето — время радости и счастья! 🌻",
        "Теплые дни, теплые мысли! 🌞"
    ],
    'autumn': [
        "Осень — время сбора урожая и подведения итогов! 🍂",
        "Как листья меняют цвет, так и ты можешь измениться! 🍁",
        "Осенняя мудрость в каждом дне! 🦉"
    ],
    'winter': [
        "Зима — время покоя и размышлений! ❄️",
        "Как снег укрывает землю, так и ты можешь укрыться теплом! 🧣",
        "Зимние вечера идеальны для заботы о себе! 🕯️"
    ]
}

def get_seasonal_phrase() -> str:
    """Получить фразу в зависимости от времени года"""
    month = datetime.now().month
    if month in [12, 1, 2]:
        season = 'winter'
    elif month in [3, 4, 5]:
        season = 'spring'
    elif month in [6, 7, 8]:
        season = 'summer'
    else:
        season = 'autumn'
    
    return random.choice(SEASONAL_PHRASES[season])

def get_time_based_phrase() -> str:
    """Получить фразу в зависимости от времени дня"""
    hour = datetime.now().hour
    
    if 5 <= hour < 12:
        return random.choice(MOTIVATION_CATEGORIES['morning'])
    elif 18 <= hour < 23:
        return random.choice(MOTIVATION_CATEGORIES['evening'])
    else:
        return random.choice(MOTIVATION_CATEGORIES['encouragement'])

def get_personalized_phrase(user_name: str, streak_days: int = 0) -> str:
    """Получить персонализированную фразу"""
    base_phrases = [
        f"Привет, {user_name}! Ты замечательный! 💕",
        f"{user_name}, ты делаешь мир лучше! 🌟",
        f"Ты важен, {user_name}! Не забывай об этом! ✨"
    ]
    
    if streak_days > 0:
        streak_phrases = [
            f"Вау, {user_name}! {streak_days} дней подряд — это впечатляюще! 🔥",
            f"{user_name}, твоя серия в {streak_days} дней вдохновляет! 💪",
            f"Ты невероятный, {user_name}! {streak_days} дней подряд! 🌟"
        ]
        return random.choice(streak_phrases)
    
    return random.choice(base_phrases)

def get_mood_encouragement(mood: str, streak_days: int = 0) -> str:
    """Получить ободряющее сообщение в зависимости от настроения"""
    encouragements = {
        'excellent': [
            "Ты сияешь! Поделись этим светом с миром! ✨",
            "Такое настроение заразительно! Продолжай! 🌟",
            "Ты вдохновляешь других своим позитивом! 💫"
        ],
        'good': [
            "Отлично! Сохрани это чувство! 😊",
            "Хорошее настроение — это подарок! 🎁",
            "Ты заслуживаешь этого хорошего настроения! 💕"
        ],
        'ok': [
            "Нормально — это тоже нормально! 😐",
            "Иногда просто быть в порядке — это уже много! 🤗",
            "Ты справляешься! Это важно! 💪"
        ],
        'bad': [
            "Трудные дни проходят, но ты остаешься сильным! 💪",
            "Ты не один в своих переживаниях! 🤗",
            "Завтра будет лучше! Верь в это! 🌅"
        ],
        'terrible': [
            "Ты переживаешь трудные времена, но ты сильнее этого! 💪",
            "Это пройдет, а ты станешь еще сильнее! ⚡",
            "Ты не один! Многие проходили через это! 🤝"
        ]
    }
    
    base_encouragement = random.choice(encouragements.get(mood, encouragements['ok']))
    
    if streak_days > 1:
        return f"{base_encouragement}\n\n🔥 Кстати, у тебя уже {streak_days} дней подряд! Ты молодец!"
    
    return base_encouragement

def get_achievement_message(streak_days: int) -> str:
    """Получить сообщение о достижении"""
    achievements = {
        3: "🎉 3 дня подряд! Ты создаешь привычку!",
        7: "🏆 Неделя подряд! Ты невероятный!",
        14: "🌟 2 недели! Ты вдохновляешь!",
        30: "👑 Месяц подряд! Ты легенда!",
        100: "💎 100 дней! Ты мастер привычек!",
        365: "🏅 Год подряд! Ты абсолютный чемпион!"
    }
    
    # Находим ближайшее достижение
    for milestone in sorted(achievements.keys(), reverse=True):
        if streak_days >= milestone:
            return achievements[milestone]
    
    return f"🔥 {streak_days} дней подряд! Продолжай в том же духе!"

def get_daily_reminder() -> str:
    """Получить ежедневное напоминание"""
    reminders = [
        "Не забывай: ты достаточно хорош! 💕",
        "Ты заслуживаешь любви и заботы! 🤗",
        "Твои чувства важны! ✨",
        "Ты не должен быть идеальным! 💫",
        "Будь добр к себе сегодня! 🌟"
    ]
    
    return random.choice(reminders)

def get_weekly_summary(mood_stats: Dict, total_days: int) -> str:
    """Получить еженедельную сводку"""
    if not mood_stats:
        return "На этой неделе пока нет записей о настроении. Начни отслеживать! 😊"
    
    # Находим преобладающее настроение
    dominant_mood = max(mood_stats.items(), key=lambda x: x[1])
    mood_emoji = {'excellent': '🌟', 'good': '😊', 'ok': '😐', 'bad': '😞', 'terrible': '😢'}.get(dominant_mood[0], '😊')
    
    summary = f"📊 Твоя неделя:\n\n"
    summary += f"📝 Всего записей: {total_days}\n"
    summary += f"🎯 Основное настроение: {mood_emoji} {dominant_mood[0].capitalize()} ({dominant_mood[1]} раз)\n\n"
    
    # Добавляем ободряющее сообщение
    if dominant_mood[0] in ['excellent', 'good']:
        summary += "Отличная неделя! Ты молодец! 🌟"
    elif dominant_mood[0] == 'ok':
        summary += "Стабильная неделя — это тоже хорошо! 💪"
    else:
        summary += "Трудная неделя, но ты справился! Ты сильный! 💪"
    
    return summary