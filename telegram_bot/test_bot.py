#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Warmly Telegram Bot
"""

import asyncio
import unittest
from unittest.mock import Mock, patch, AsyncMock
from datetime import datetime, time
import tempfile
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
from database import Database
from phrases import Phrases
from scheduler import NotificationScheduler
from config import config

class TestDatabase(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.temp_db = tempfile.NamedTemporaryFile(delete=False)
        self.temp_db.close()
        self.db = Database(self.temp_db.name)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        os.unlink(self.temp_db.name)
    
    async def test_add_user(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = 123456789
        username = "test_user"
        
        await self.db.add_user(user_id, username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω
        users = await self.db.get_all_users()
        self.assertEqual(len(users), 1)
        self.assertEqual(users[0]['user_id'], user_id)
        self.assertEqual(users[0]['username'], username)
    
    async def test_save_phrase(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
        user_id = 123456789
        phrase = "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞"
        
        await self.db.add_user(user_id, "test_user")
        await self.db.save_phrase(user_id, phrase)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—Ä–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        phrases = await self.db.get_saved_phrases(user_id)
        self.assertEqual(len(phrases), 1)
        self.assertEqual(phrases[0], phrase)
    
    async def test_user_settings(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = 123456789
        
        await self.db.add_user(user_id, "test_user")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings = await self.db.get_user_settings(user_id)
        self.assertTrue(settings['morning_enabled'])
        self.assertTrue(settings['evening_enabled'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await self.db.update_user_setting(user_id, 'morning_enabled', False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updated_settings = await self.db.get_user_settings(user_id)
        self.assertFalse(updated_settings['morning_enabled'])

class TestPhrases(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è —Ñ—Ä–∞–∑"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.phrases = Phrases()
    
    def test_get_random_phrase(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã"""
        phrase = self.phrases.get_random_phrase("morning")
        self.assertIsInstance(phrase, str)
        self.assertGreater(len(phrase), 0)
        self.assertIn(phrase, self.phrases.morning_phrases)
    
    def test_phrase_categories(self):
        """–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ—Ä–∞–∑"""
        categories = ["morning", "day", "evening", "good", "ok", "bad"]
        
        for category in categories:
            phrase = self.phrases.get_random_phrase(category)
            self.assertIsInstance(phrase, str)
            self.assertGreater(len(phrase), 0)
    
    def test_all_phrases(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—Ä–∞–∑"""
        all_phrases = self.phrases.get_all_phrases()
        
        self.assertIn("morning", all_phrases)
        self.assertIn("day", all_phrases)
        self.assertIn("evening", all_phrases)
        self.assertIn("good_mood", all_phrases)
        self.assertIn("ok_mood", all_phrases)
        self.assertIn("bad_mood", all_phrases)
        
        for category, phrases_list in all_phrases.items():
            self.assertIsInstance(phrases_list, list)
            self.assertGreater(len(phrases_list), 0)

class TestScheduler(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.scheduler = NotificationScheduler()
    
    def test_scheduler_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.assertFalse(self.scheduler.running)
        self.assertIsNone(self.scheduler.thread)
        self.assertIsNone(self.scheduler.bot_instance)
        self.assertIsNone(self.scheduler.db)
    
    def test_set_bot_instance(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        mock_bot = Mock()
        mock_db = Mock()
        mock_bot.db = mock_db
        
        self.scheduler.set_bot_instance(mock_bot)
        
        self.assertEqual(self.scheduler.bot_instance, mock_bot)
        self.assertEqual(self.scheduler.db, mock_db)

class TestConfig(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def test_config_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        with patch.dict(os.environ, {'TELEGRAM_BOT_TOKEN': '123456789:ABCdefGHIjklMNOpqrsTUVwxyz'}):
            config = Config()
            self.assertTrue(config.validate())
    
    def test_config_validation_invalid_token(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
        with patch.dict(os.environ, {'TELEGRAM_BOT_TOKEN': 'invalid_token'}):
            config = Config()
            with self.assertRaises(ValueError):
                config.validate()
    
    def test_config_validation_missing_token(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
        with patch.dict(os.environ, {}, clear=True):
            config = Config()
            with self.assertRaises(ValueError):
                config.validate()

class TestBotIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–æ—Ç–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.temp_db = tempfile.NamedTemporaryFile(delete=False)
        self.temp_db.close()
        self.db = Database(self.temp_db.name)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        os.unlink(self.temp_db.name)
    
    async def test_user_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = 123456789
        username = "test_user"
        
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.db.add_user(user_id, username)
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = await self.db.get_user_settings(user_id)
        self.assertTrue(settings['morning_enabled'])
        
        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
        phrase = "–¢–µ—Å—Ç–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"
        await self.db.save_phrase(user_id, phrase)
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
        saved_phrases = await self.db.get_saved_phrases(user_id)
        self.assertEqual(len(saved_phrases), 1)
        self.assertEqual(saved_phrases[0], phrase)
        
        # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await self.db.update_user_stats(user_id, "phrases_received", 1)
        await self.db.update_user_stats(user_id, "phrases_saved", 1)
        
        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await self.db.get_user_stats(user_id)
        self.assertEqual(stats['phrases_received'], 1)
        self.assertEqual(stats['phrases_saved'], 1)
    
    async def test_notification_users(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await self.db.add_user(1, "user1")
        await self.db.add_user(2, "user2")
        await self.db.add_user(3, "user3")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2
        await self.db.update_user_setting(2, 'morning_enabled', False)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3
        await self.db.update_user_setting(3, 'evening_enabled', False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        morning_users = await self.db.get_users_for_notification("morning")
        self.assertIn(1, morning_users)
        self.assertNotIn(2, morning_users)
        self.assertIn(3, morning_users)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        evening_users = await self.db.get_users_for_notification("evening")
        self.assertIn(1, evening_users)
        self.assertIn(2, evening_users)
        self.assertNotIn(3, evening_users)

def run_async_test(test_func):
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(test_func())
    finally:
        loop.close()

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Warmly Telegram Bot")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestDatabase))
    suite.addTests(loader.loadTestsFromTestCase(TestPhrases))
    suite.addTests(loader.loadTestsFromTestCase(TestScheduler))
    suite.addTests(loader.loadTestsFromTestCase(TestConfig))
    suite.addTests(loader.loadTestsFromTestCase(TestBotIntegration))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏: {len(result.failures)} failures, {len(result.errors)} errors")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_tests()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    print("\nüîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    async def run_async_tests():
        test_db = TestDatabase()
        test_db.setUp()
        try:
            await test_db.test_add_user()
            await test_db.test_save_phrase()
            await test_db.test_user_settings()
            print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        finally:
            test_db.tearDown()
        
        test_integration = TestBotIntegration()
        test_integration.setUp()
        try:
            await test_integration.test_user_workflow()
            await test_integration.test_notification_users()
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        finally:
            test_integration.tearDown()
    
    run_async_test(run_async_tests)
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")