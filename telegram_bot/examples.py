#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Warmly Telegram Bot
"""

import asyncio
import random
from datetime import datetime, time
from typing import List, Dict

from database import Database
from phrases import Phrases
from scheduler import NotificationScheduler

class BotExamples:
    """–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.db = Database()
        self.phrases = Phrases()
        self.scheduler = NotificationScheduler()
    
    async def example_user_registration(self):
        """–ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üìù –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        user_id = 123456789
        username = "example_user"
        first_name = "–ò–≤–∞–Ω"
        last_name = "–ü–µ—Ç—Ä–æ–≤"
        
        await self.db.add_user(user_id, username, first_name, last_name)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    async def example_save_phrase(self):
        """–ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
        print("üíæ –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã")
        
        user_id = 123456789
        phrase = "–¢—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à –ø—Ä–æ—Å—Ç–æ —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å."
        
        await self.db.save_phrase(user_id, phrase)
        print(f"‚úÖ –§—Ä–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {phrase}")
    
    async def example_get_saved_phrases(self):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        print("üìö –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑")
        
        user_id = 123456789
        phrases = await self.db.get_saved_phrases(user_id)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(phrases)} —Ñ—Ä–∞–∑:")
        for i, phrase in enumerate(phrases, 1):
            print(f"  {i}. {phrase}")
    
    async def example_get_random_phrase(self):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã"""
        print("üé≤ –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        current_hour = datetime.now().hour
        
        if 5 <= current_hour < 12:
            phrase = random.choice(self.phrases.morning_phrases)
            time_of_day = "—É—Ç—Ä–æ"
        elif 20 <= current_hour or current_hour < 5:
            phrase = random.choice(self.phrases.evening_phrases)
            time_of_day = "–≤–µ—á–µ—Ä"
        else:
            phrase = random.choice(self.phrases.day_phrases)
            time_of_day = "–¥–µ–Ω—å"
        
        print(f"‚úÖ –§—Ä–∞–∑–∞ –Ω–∞ {time_of_day}: {phrase}")
    
    async def example_mood_phrases(self):
        """–ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        print("üòä –ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
        
        moods = [
            ("good", "—Ö–æ—Ä–æ—à–µ–µ"),
            ("ok", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ"),
            ("bad", "–ø–ª–æ—Ö–æ–µ")
        ]
        
        for mood, mood_name in moods:
            if mood == "good":
                phrase = random.choice(self.phrases.good_mood_phrases)
            elif mood == "ok":
                phrase = random.choice(self.phrases.ok_mood_phrases)
            else:
                phrase = random.choice(self.phrases.bad_mood_phrases)
            
            print(f"‚úÖ {mood_name.capitalize()} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {phrase}")
    
    async def example_user_settings(self):
        """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("‚öôÔ∏è –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        
        user_id = 123456789
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await self.db.get_user_settings(user_id)
        print(f"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await self.db.update_user_setting(user_id, 'morning_enabled', False)
        print("‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        new_settings = await self.db.get_user_settings(user_id)
        print(f"üìã –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {new_settings}")
    
    async def example_statistics(self):
        """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        print("üìä –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
        
        user_id = 123456789
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self.db.update_user_stats(user_id, "phrases_received", 5)
        await self.db.update_user_stats(user_id, "phrases_saved", 2)
        await self.db.update_user_stats(user_id, "mood_checks", 3)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_user_stats(user_id)
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats}")
    
    async def example_notification_scheduling(self):
        """–ü—Ä–∏–º–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("‚è∞ –ü—Ä–∏–º–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        morning_users = await self.db.get_users_for_notification("morning")
        print(f"üåÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(morning_users)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        evening_users = await self.db.get_users_for_notification("evening")
        print(f"üåô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(evening_users)}")
    
    async def example_phrase_categories(self):
        """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ñ—Ä–∞–∑"""
        print("üìù –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ñ—Ä–∞–∑")
        
        categories = [
            ("morning", "—É—Ç—Ä–µ–Ω–Ω–∏–µ"),
            ("day", "–¥–Ω–µ–≤–Ω—ã–µ"),
            ("evening", "–≤–µ—á–µ—Ä–Ω–∏–µ"),
            ("good", "–¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"),
            ("ok", "–¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"),
            ("bad", "–¥–ª—è –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
        ]
        
        for category, description in categories:
            phrase = self.phrases.get_random_phrase(category)
            print(f"‚úÖ {description.capitalize()}: {phrase}")
    
    async def example_database_operations(self):
        """–ü—Ä–∏–º–µ—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await self.db.get_all_users()
        print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 3
            stats = await self.db.get_user_stats(user['user_id'])
            print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']}: {stats}")
    
    async def run_all_examples(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã"""
        print("ü§ç –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ Warmly Telegram Bot")
        print("=" * 50)
        
        try:
            await self.example_user_registration()
            print()
            
            await self.example_save_phrase()
            print()
            
            await self.example_get_saved_phrases()
            print()
            
            await self.example_get_random_phrase()
            print()
            
            await self.example_mood_phrases()
            print()
            
            await self.example_user_settings()
            print()
            
            await self.example_statistics()
            print()
            
            await self.example_notification_scheduling()
            print()
            
            await self.example_phrase_categories()
            print()
            
            await self.example_database_operations()
            print()
            
            print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    examples = BotExamples()
    await examples.run_all_examples()

if __name__ == "__main__":
    asyncio.run(main())