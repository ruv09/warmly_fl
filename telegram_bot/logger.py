#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
import logging.handlers
import os
import sys
from datetime import datetime
from typing import Optional

from config import config

class BotLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self, name: str = "warmly_bot"):
        self.name = name
        self.logger = logging.getLogger(name)
        self._setup_logger()
    
    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = getattr(logging, config.LOG_LEVEL.upper(), logging.INFO)
        self.logger.setLevel(log_level)
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            config.LOG_FORMAT,
            datefmt=config.LOG_DATE_FORMAT
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(log_level)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if config.LOG_FILE:
            # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            log_dir = os.path.dirname(config.LOG_FILE)
            if log_dir and not os.path.exists(log_dir):
                os.makedirs(log_dir)
            
            # –†–æ—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            file_handler = logging.handlers.RotatingFileHandler(
                config.LOG_FILE,
                maxBytes=config.LOG_MAX_SIZE,
                backupCount=config.LOG_BACKUP_COUNT,
                encoding='utf-8'
            )
            file_handler.setLevel(log_level)
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫ (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
        error_handler = logging.handlers.RotatingFileHandler(
            config.LOG_FILE.replace('.log', '_errors.log'),
            maxBytes=config.LOG_MAX_SIZE,
            backupCount=config.LOG_BACKUP_COUNT,
            encoding='utf-8'
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(formatter)
        self.logger.addHandler(error_handler)
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        self.logger.propagate = False
    
    def get_logger(self) -> logging.Logger:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä"""
        return self.logger
    
    def log_startup(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("=" * 50)
        self.logger.info("ü§ç Warmly Telegram Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        self.logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.LOG_LEVEL}")
        self.logger.info(f"–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {config.is_development()}")
        self.logger.info("=" * 50)
    
    def log_shutdown(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        self.logger.info("=" * 50)
        self.logger.info("ü§ç Warmly Telegram Bot –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
        self.logger.info(f"–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.logger.info("=" * 50)
    
    def log_user_action(self, user_id: int, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {action} {details}")
    
    def log_error(self, error: Exception, context: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        self.logger.error(f"–û—à–∏–±–∫–∞ {context}: {str(error)}", exc_info=True)
    
    def log_performance(self, operation: str, duration: float, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.logger.info(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {operation} - {duration:.2f}—Å {details}")
    
    def log_notification(self, user_id: int, notification_type: str, success: bool):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        status = "—É—Å–ø–µ—à–Ω–æ" if success else "–Ω–µ—É–¥–∞—á–Ω–æ"
        self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status}")
    
    def log_database_operation(self, operation: str, table: str, user_id: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        user_info = f" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})" if user_id else ""
        self.logger.debug(f"–ë–î: {operation} –≤ —Ç–∞–±–ª–∏—Ü–µ {table}{user_info}")
    
    def log_scheduler_event(self, event: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {event} {details}")
    
    def log_security_event(self, event: str, user_id: int, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.warning(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {event} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {details}")
    
    def log_statistics(self, stats: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    def log_configuration(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:")
        self.logger.info(f"  - –¢–æ–∫–µ–Ω: {'*' * 20}{config.TELEGRAM_BOT_TOKEN[-4:] if config.TELEGRAM_BOT_TOKEN else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        self.logger.info(f"  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DB_PATH}")
        self.logger.info(f"  - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {config.LOG_LEVEL}")
        self.logger.info(f"  - –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {config.is_development()}")
        self.logger.info(f"  - –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {config.DEFAULT_MORNING_TIME}")
        self.logger.info(f"  - –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {config.DEFAULT_EVENING_TIME}")
        self.logger.info(f"  - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {config.DEFAULT_TIMEZONE}")

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
bot_logger = BotLogger()

def get_logger(name: str = None) -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä"""
    if name:
        return logging.getLogger(name)
    return bot_logger.get_logger()

def log_exception(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            bot_logger.log_error(e, f"–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
            raise
    return wrapper

def log_performance(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    def wrapper(*args, **kwargs):
        start_time = datetime.now()
        try:
            result = func(*args, **kwargs)
            duration = (datetime.now() - start_time).total_seconds()
            bot_logger.log_performance(func.__name__, duration)
            return result
        except Exception as e:
            duration = (datetime.now() - start_time).total_seconds()
            bot_logger.log_performance(func.__name__, duration, f"(–æ—à–∏–±–∫–∞: {str(e)})")
            raise
    return wrapper