#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Warmly Telegram Bot
Telegram –±–æ—Ç –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Ç—ë–ø–ª—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
"""

import asyncio
import json
import random
import signal
import sys
from datetime import datetime, time
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from telegram.constants import ParseMode

from database import Database
from scheduler import NotificationScheduler
from phrases import Phrases
from config import config
from logger import get_logger, log_startup, log_shutdown, log_error, log_user_action, log_bot_action

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = get_logger()

class WarmlyBot:
    def __init__(self, token: str = None):
        self.token = token or config.TELEGRAM_BOT_TOKEN
        if not self.token:
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.db = Database()
        self.scheduler = NotificationScheduler()
        self.phrases = Phrases()
        self.application = None
        self.running = False
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–¥—Ä—É–≥"
        
        log_user_action(user_id, "–ö–æ–º–∞–Ω–¥–∞ /start", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.db.add_user(user_id, username)
        
        welcome_text = f"""
ü§ç –ü—Ä–∏–≤–µ—Ç, {username}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Warmly ‚Äî —Ç–≤–æ—ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à. –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å.

–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –¢—ã –º–æ–∂–µ—à—å:
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–ù–∞—á–Ω—ë–º? ‚ú®
        """
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –ü–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É", callback_data="get_phrase")],
            [InlineKeyboardButton("üòä –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", callback_data="mood")],
            [InlineKeyboardButton("üìö –ê—Ä—Ö–∏–≤", callback_data="archive")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ç <b>Warmly Bot - –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/phrase - –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
/mood - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
/archive - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –ù–∞–∂–º–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É" –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –í—ã–±–µ—Ä–∏ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?" —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á—É–≤—Å—Ç–≤–∞–º–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ñ—Ä–∞–∑—ã –≤ –∞—Ä—Ö–∏–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö

<b>–û –±–æ—Ç–µ:</b>
Warmly ‚Äî —ç—Ç–æ —Ç–≤–æ—ë –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –¥–æ–±—Ä—ã—Ö —Å–ª–æ–≤. 
–¢—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à –ø—Ä–æ—Å—Ç–æ —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å. üíô
        """
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def phrase_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /phrase"""
        await self.send_phrase(update, context)
    
    async def send_phrase(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É"""
        user_id = update.effective_user.id
        current_hour = datetime.now().hour
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        if 5 <= current_hour < 12:
            phrase = random.choice(self.phrases.morning_phrases)
            greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ üåû"
        elif 20 <= current_hour or current_hour < 5:
            phrase = random.choice(self.phrases.evening_phrases)
            greeting = "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ üåô"
        else:
            phrase = random.choice(self.phrases.day_phrases)
            greeting = "–¢—ë–ø–ª–æ–≥–æ –¥–Ω—è ‚ú®"
        
        message_text = f"{greeting}\n\n{phrase}"
        
        keyboard = [
            [InlineKeyboardButton("‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤", callback_data=f"save_phrase:{phrase}")],
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_phrase:{phrase}")],
            [InlineKeyboardButton("üîÑ –ï—â—ë —Ñ—Ä–∞–∑—É", callback_data="get_phrase")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message_text, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                message_text, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    async def mood_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mood"""
        await self.show_mood_menu(update, context)
    
    async def show_mood_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        text = "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? üòä"
        
        keyboard = [
            [InlineKeyboardButton("üòä –•–æ—Ä–æ—à–æ", callback_data="mood_good")],
            [InlineKeyboardButton("üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data="mood_ok")],
            [InlineKeyboardButton("üòû –ü–ª–æ—Ö–æ", callback_data="mood_bad")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                text, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    async def handle_mood_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, mood: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if mood == "good":
            phrase = random.choice(self.phrases.good_mood_phrases)
        elif mood == "ok":
            phrase = random.choice(self.phrases.ok_mood_phrases)
        else:  # bad
            phrase = random.choice(self.phrases.bad_mood_phrases)
        
        message_text = f"<i>{phrase}</i>"
        
        keyboard = [
            [InlineKeyboardButton("‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤", callback_data=f"save_phrase:{phrase}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message_text, 
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def archive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /archive"""
        await self.show_archive(update, context)
    
    async def show_archive(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        user_id = update.effective_user.id
        saved_phrases = await self.db.get_saved_phrases(user_id)
        
        if not saved_phrases:
            text = "üìö <b>–ê—Ä—Ö–∏–≤</b>\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –∂–∏—Ç—å —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ñ—Ä–∞–∑—ã. –ù–∞–∂–º–∏ ‚ù§, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        else:
            text = "üìö <b>–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã:</b>\n\n"
            for i, phrase in enumerate(saved_phrases[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                text += f"{i}. {phrase}\n\n"
            
            if len(saved_phrases) > 10:
                text += f"... –∏ –µ—â—ë {len(saved_phrases) - 10} —Ñ—Ä–∞–∑"
            
            keyboard = [
                [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data="clear_archive")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                text, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        await self.show_settings(update, context)
    
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        user_id = update.effective_user.id
        user_settings = await self.db.get_user_settings(user_id)
        
        morning_time = user_settings.get('morning_time', '08:00')
        evening_time = user_settings.get('evening_time', '22:00')
        morning_enabled = user_settings.get('morning_enabled', True)
        evening_enabled = user_settings.get('evening_enabled', True)
        
        text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'‚úÖ' if morning_enabled else '‚ùå'} {morning_time}
üåô <b>–í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'‚úÖ' if evening_enabled else '‚ùå'} {evening_time}

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
        """
        
        keyboard = [
            [InlineKeyboardButton(f"üåÖ –£—Ç—Ä–æ {'‚úÖ' if morning_enabled else '‚ùå'}", callback_data="toggle_morning")],
            [InlineKeyboardButton(f"üåô –í–µ—á–µ—Ä {'‚úÖ' if evening_enabled else '‚ùå'}", callback_data="toggle_evening")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                text, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = "ü§ç <b>Warmly</b>\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –ü–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É", callback_data="get_phrase")],
            [InlineKeyboardButton("üòä –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", callback_data="mood")],
            [InlineKeyboardButton("üìö –ê—Ä—Ö–∏–≤", callback_data="archive")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, 
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "get_phrase":
            await self.send_phrase(update, context)
        elif data == "mood":
            await self.show_mood_menu(update, context)
        elif data == "archive":
            await self.show_archive(update, context)
        elif data == "settings":
            await self.show_settings(update, context)
        elif data == "main_menu":
            await self.show_main_menu(update, context)
        elif data.startswith("mood_"):
            mood = data.split("_")[1]
            await self.handle_mood_selection(update, context, mood)
        elif data.startswith("save_phrase:"):
            phrase = data.split(":", 1)[1]
            await self.save_phrase(update, context, phrase)
        elif data.startswith("share_phrase:"):
            phrase = data.split(":", 1)[1]
            await self.share_phrase(update, context, phrase)
        elif data == "clear_archive":
            await self.clear_archive(update, context)
        elif data == "toggle_morning":
            await self.toggle_morning_notifications(update, context)
        elif data == "toggle_evening":
            await self.toggle_evening_notifications(update, context)
    
    async def save_phrase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, phrase: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –∞—Ä—Ö–∏–≤"""
        user_id = update.effective_user.id
        await self.db.save_phrase(user_id, phrase)
        
        await update.callback_query.answer("–§—Ä–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤! ‚ù§Ô∏è")
    
    async def share_phrase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, phrase: str):
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ—Ä–∞–∑–æ–π"""
        share_text = f"ü§ç Warmly\n\n{phrase}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @warmly_bot"
        await update.callback_query.answer(f"–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É:\n\n{share_text}")
    
    async def clear_archive(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤"""
        user_id = update.effective_user.id
        await self.db.clear_saved_phrases(user_id)
        await update.callback_query.answer("–ê—Ä—Ö–∏–≤ –æ—á–∏—â–µ–Ω")
        await self.show_archive(update, context)
    
    async def toggle_morning_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        current_settings = await self.db.get_user_settings(user_id)
        new_value = not current_settings.get('morning_enabled', True)
        await self.db.update_user_setting(user_id, 'morning_enabled', new_value)
        await update.callback_query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        await self.show_settings(update, context)
    
    async def toggle_evening_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        current_settings = await self.db.get_user_settings(user_id)
        new_value = not current_settings.get('evening_enabled', True)
        await self.db.update_user_setting(user_id, 'evening_enabled', new_value)
        await update.callback_query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        await self.show_settings(update, context)
    
    async def send_scheduled_notification(self, user_id: int, notification_type: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if notification_type == "morning":
            phrase = random.choice(self.phrases.morning_phrases)
            greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ üåû"
        else:  # evening
            phrase = random.choice(self.phrases.evening_phrases)
            greeting = "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ üåô"
        
        message_text = f"{greeting}\n\n{phrase}"
        
        try:
            await self.application.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            log_startup()
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("phrase", self.phrase_command))
            self.application.add_handler(CommandHandler("mood", self.mood_command))
            self.application.add_handler(CommandHandler("archive", self.archive_command))
            self.application.add_handler(CommandHandler("settings", self.settings_command))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.set_bot_instance(self)
            self.scheduler.start()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
            self._setup_signal_handlers()
            
            self.running = True
            log_bot_action("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.application.run_polling()
            
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
            raise
        finally:
            self._shutdown()
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            log_bot_action("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", f"–°–∏–≥–Ω–∞–ª: {signum}")
            self._shutdown()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def _shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if self.running:
            log_bot_action("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            self.running = False
            
            if self.scheduler:
                self.scheduler.stop()
            
            log_shutdown()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config.validate()
        
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = WarmlyBot()
        bot.run()
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        sys.exit(1)
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        print("\nü§ç –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
        
    except Exception as e:
        log_error(e, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()