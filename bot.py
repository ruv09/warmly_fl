import json
import os
import logging
from datetime import datetime, time
from typing import Dict, Any
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
USERS_FILE = "users.json"
PHRASES_FILE = "phrases.json"
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler = AsyncIOScheduler()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã
with open(PHRASES_FILE, "r", encoding="utf-8") as f:
    phrases = json.load(f)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
user_settings: Dict[str, Dict[str, str]] = {}


def load_users() -> Dict[str, Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ users.json: {e}")
            return {}
    return {}


def save_users(users: Dict[str, Dict[str, str]]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ users.json: {e}")


def validate_time(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú"""
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False


def get_random_phrase(phrase_type: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º"""
    import random
    phrase_list = phrases.get(phrase_type, [])
    return random.choice(phrase_list) if phrase_list else "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåü"


async def send_morning_message(user_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        phrase = get_random_phrase("morning")
        await bot.send_message(user_id, phrase)
        logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_evening_message(user_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        phrase = get_random_phrase("evening")
        await bot.send_message(user_id, phrase)
        logger.info(f"–í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def schedule_user_notifications(user_id: str, wakeup_time: str, sleep_time: str):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        scheduler.remove_job(f"morning_{user_id}", jobstore=None)
        scheduler.remove_job(f"evening_{user_id}", jobstore=None)
    except:
        pass
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    wakeup_hour, wakeup_minute = map(int, wakeup_time.split(":"))
    sleep_hour, sleep_minute = map(int, sleep_time.split(":"))
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    scheduler.add_job(
        send_morning_message,
        CronTrigger(hour=wakeup_hour, minute=wakeup_minute),
        args=[user_id],
        id=f"morning_{user_id}",
        replace_existing=True
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    scheduler.add_job(
        send_evening_message,
        CronTrigger(hour=sleep_hour, minute=sleep_minute),
        args=[user_id],
        id=f"evening_{user_id}",
        replace_existing=True
    )
    
    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —É—Ç—Ä–æ {wakeup_time}, –≤–µ—á–µ—Ä {sleep_time}")


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.from_user.id)
    
    if user_id in user_settings:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        settings = user_settings[user_id]
        wakeup = settings.get("wakeup_time", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        sleep = settings.get("sleep_time", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç! üåø\n\n"
            f"–¢—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
            f"–£—Ç—Ä–æ: {wakeup} | –í–µ—á–µ—Ä: {sleep}\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å.\n"
            f"–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)"
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üåø\n\n"
            "–Ø Warmly ‚Äî —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
            "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ç—ë–ø–ª—ã–µ —Ñ—Ä–∞–∑—ã —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º.\n\n"
            "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n\n"
            "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00)"
        )


@dp.message_handler(lambda message: message.text and message.text.count(':') == 1 and len(message.text.split(':')) == 2)
async def handle_time_input(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = str(message.from_user.id)
    time_str = message.text
    
    if not validate_time(time_str):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)")
        return
    
    if user_id not in user_settings:
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        user_settings[user_id] = {"wakeup_time": time_str}
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –£—Ç—Ä–æ: {time_str} üåÖ\n\n"
            f"–ê –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:00)"
        )
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if "wakeup_time" in user_settings[user_id] and "sleep_time" not in user_settings[user_id]:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–Ω–∞
            user_settings[user_id]["sleep_time"] = time_str
            wakeup = user_settings[user_id]["wakeup_time"]
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            schedule_user_notifications(user_id, wakeup, time_str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            save_users(user_settings)
            
            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üåø\n\n"
                f"–£—Ç—Ä–æ: {wakeup} üåÖ\n"
                f"–í–µ—á–µ—Ä: {time_str} üåô\n\n"
                f"–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ç—ë–ø–ª—ã–µ —Ñ—Ä–∞–∑—ã –≤ —ç—Ç–æ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n"
                f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ."
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if "wakeup_time" in user_settings[user_id] and "sleep_time" in user_settings[user_id]:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è
                user_settings[user_id]["wakeup_time"] = time_str
                sleep_time = user_settings[user_id]["sleep_time"]
                
                # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                schedule_user_notifications(user_id, time_str, sleep_time)
                save_users(user_settings)
                
                await message.answer(
                    f"–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üåÖ\n\n"
                    f"–£—Ç—Ä–æ: {time_str}\n"
                    f"–í–µ—á–µ—Ä: {sleep_time}\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
                )
            else:
                # –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                user_settings[user_id] = {"wakeup_time": time_str}
                await message.answer(
                    f"–£—Ç—Ä–æ: {time_str} üåÖ\n\n"
                    f"–ê –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:00)"
                )


@dp.message_handler()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )


async def on_startup(dp):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    global user_settings
    user_settings = load_users()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_settings)}")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id, settings in user_settings.items():
        if "wakeup_time" in settings and "sleep_time" in settings:
            schedule_user_notifications(
                user_id, 
                settings["wakeup_time"], 
                settings["sleep_time"]
            )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")


async def on_shutdown(dp):
    """–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    scheduler.shutdown()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)