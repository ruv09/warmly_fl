from __future__ import annotations
import random
from typing import Final

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from .phrases import MOOD_GOOD, MOOD_OK, MOOD_BAD, FRIEND, random_from
from .storage import add_favorite, list_favorites


HELP_TEXT: Final[str] = (
    "–Ø ‚Äî –±–æ—Ç Warmly. –Ø –ø—Ä–∏—Å—ã–ª–∞—é —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ –∏ –±–µ—Ä–µ–∂–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/mood ‚Äî –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É\n"
    "/send ‚Äî —Ñ—Ä–∞–∑–∞, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º\n"
    "/archive ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã\n"
)


def _mood_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üòä –•–æ—Ä–æ—à–æ", callback_data="mood:good"),
                InlineKeyboardButton("üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data="mood:ok"),
                InlineKeyboardButton("üòû –ü–ª–æ—Ö–æ", callback_data="mood:bad"),
            ]
        ]
    )


def _phrase_keyboard(mood: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚ù§Ô∏è –í –∞—Ä—Ö–∏–≤", callback_data="save"),
                InlineKeyboardButton("–ï—â—ë", callback_data=f"another:{mood}"),
            ]
        ]
    )


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Warmly –±–æ—Ç. –ó–∞–±–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–ª–æ–≥–æ.\n\n" + HELP_TEXT
    )


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(HELP_TEXT)


async def cmd_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=_mood_keyboard())


async def on_mood_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    mood = query.data.split(":", 1)[1]
    pool = MOOD_GOOD if mood == "good" else MOOD_OK if mood == "ok" else MOOD_BAD
    phrase = random_from(pool)

    # store last phrase in user_data for quick saving
    context.user_data["last_phrase"] = phrase

    await query.edit_message_text(
        text=phrase,
        reply_markup=_phrase_keyboard(mood),
    )


async def on_another(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    mood = query.data.split(":", 1)[1]
    pool = MOOD_GOOD if mood == "good" else MOOD_OK if mood == "ok" else MOOD_BAD
    phrase = random_from(pool)
    context.user_data["last_phrase"] = phrase

    await query.edit_message_text(text=phrase, reply_markup=_phrase_keyboard(mood))


async def on_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤")

    phrase = context.user_data.get("last_phrase")
    if not phrase:
        await query.edit_message_caption(caption="–ù–µ –Ω–∞—à—ë–ª —Ñ—Ä–∞–∑—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return

    user_id = update.effective_user.id
    db_path: str = context.application.bot_data["db_path"]
    await add_favorite(db_path, user_id, phrase)

    # keep message text and keyboard
    await query.edit_message_text(text=phrase, reply_markup=query.message.reply_markup)


async def cmd_archive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    db_path: str = context.application.bot_data["db_path"]
    rows = await list_favorites(db_path, user_id, limit=10)

    if not rows:
        await update.message.reply_text(
            "–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç. –ü–æ–ª—É—á–∏ —Ñ—Ä–∞–∑—É —á–µ—Ä–µ–∑ /mood –∏ –Ω–∞–∂–º–∏ ‚Äò–í –∞—Ä—Ö–∏–≤‚Äô."
        )
        return

    lines = ["–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞:\n"]
    for row in rows:
        when = row["created_at"].replace("T", " ")
        text = row["text"]
        lines.append(f"‚Ä¢ {when}: {text}")

    await update.message.reply_text("\n".join(lines))


async def cmd_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    phrase = random_from(FRIEND)
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ï—â—ë", callback_data="friend:another")]]
    )
    await update.message.reply_text(
        f"–¢—ë–ø–ª–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥—Ä—É–≥–∞:\n\n‚Äú{phrase}‚Äù", reply_markup=keyboard
    )


async def on_friend_another(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    phrase = random_from(FRIEND)
    await query.edit_message_text(
        f"–¢—ë–ø–ª–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥—Ä—É–≥–∞:\n\n‚Äú{phrase}‚Äù",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ï—â—ë", callback_data="friend:another")]]
        ),
    )
