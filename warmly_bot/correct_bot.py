#!/usr/bin/env python3
"""
Warmly Telegram Bot - Correct Version
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
"""

import logging
import os
import sqlite3
import random
import requests
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8206347291:AAF4eUByCshjhZzPwkGGLyqvm7jhDp_5lZM"
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'warmly_bot.db'

class CorrectWarmlyBot:
    def __init__(self):
        self.db_path = DB_PATH
        self.init_database()
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                timezone TEXT DEFAULT 'Europe/Moscow',
                alarm_time TEXT DEFAULT '07:30',
                alarm_enabled BOOLEAN DEFAULT 1,
                language TEXT DEFAULT 'ru',
                streak_days INTEGER DEFAULT 0,
                last_mood_date DATE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS moods (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                mood TEXT NOT NULL,
                message TEXT,
                custom_message TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS favorites (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                phrase TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def get_user(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user:
            return {
                'user_id': user[0],
                'username': user[1],
                'first_name': user[2],
                'last_name': user[3],
                'timezone': user[4],
                'alarm_time': user[5],
                'alarm_enabled': bool(user[6]),
                'language': user[7],
                'streak_days': user[8],
                'last_mood_date': user[9],
                'created_at': user[10]
            }
        return None
    
    def create_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        conn.commit()
        conn.close()
    
    def update_user_streak(self, user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏—é –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é
        cursor.execute('SELECT streak_days, last_mood_date FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result:
            streak_days, last_mood_date = result
            today = datetime.now().date()
            
            if last_mood_date:
                last_date = datetime.strptime(last_mood_date, '%Y-%m-%d').date()
                if today == last_date + timedelta(days=1):
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é
                    streak_days += 1
                elif today > last_date + timedelta(days=1):
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
                    streak_days = 1
            else:
                streak_days = 1
            
            cursor.execute('''
                UPDATE users 
                SET streak_days = ?, last_mood_date = ?
                WHERE user_id = ?
            ''', (streak_days, today, user_id))
        
        conn.commit()
        conn.close()
    
    def save_mood(self, user_id: int, mood: str, message: str = None, custom_message: str = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO moods (user_id, mood, message, custom_message)
            VALUES (?, ?, ?, ?)
        ''', (user_id, mood, message, custom_message))
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é
        self.update_user_streak(user_id)
    
    def save_favorite(self, user_id: int, phrase: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO favorites (user_id, phrase)
            VALUES (?, ?)
        ''', (user_id, phrase))
        conn.commit()
        conn.close()
    
    def get_favorites(self, user_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT phrase FROM favorites 
            WHERE user_id = ? 
            ORDER BY created_at DESC
        ''', (user_id,))
        favorites = [row[0] for row in cursor.fetchall()]
        conn.close()
        return favorites
    
    def get_mood_stats(self, user_id: int, days: int = 30) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º
        cursor.execute('''
            SELECT mood, COUNT(*) as count
            FROM moods 
            WHERE user_id = ? AND created_at >= date('now', '-{} days')
            GROUP BY mood
        '''.format(days), (user_id,))
        
        mood_stats = {row[0]: row[1] for row in cursor.fetchall()}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute('''
            SELECT COUNT(*) FROM moods 
            WHERE user_id = ? AND created_at >= date('now', '-{} days')
        '''.format(days), (user_id,))
        
        total_moods = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'mood_stats': mood_stats,
            'total_moods': total_moods,
            'days': days
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = CorrectWarmlyBot()

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
MOTIVATIONAL_PHRASES = [
    "–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ ‚Äî –ø—Ä–æ—Å–Ω—É–ª—Å—è. –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –¥–µ—Ç–∞–ª–∏.",
    "–¢—ã ‚Äî —á—É–¥–æ. –ü—Ä–æ—Å—Ç–æ —Ç–∞–∫.",
    "–¢—ã –Ω–µ –æ–¥–∏–Ω. –¢—ã –≤–∞–∂–µ–Ω. –¢—ã –ª—é–±–∏–º.",
    "–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫ ‚Äî —Ç—ã —Å–µ–≥–æ–¥–Ω—è –∫–ª–∞—Å—Å–Ω—ã–π. –¢–æ—á–∫–∞.",
    "–¢—ã–ö–ª–∞—Å—Å–Ω—ã–π. –ü—Ä–æ—Å—Ç–æ –±—É–¥—É—á–∏ —Å–æ–±–æ–π ü§ç",
    "–°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ –æ—â—É—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ —Ç–≤–æ—ë.",
    "–ù–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –°–¥–µ–ª–∞–π –º—è–≥–∫–∏–π –≤–¥–æ—Ö.",
    "–ï—Å–ª–∏ —Ç—è–∂–µ–ª–æ ‚Äî —ç—Ç–æ –Ω–µ –Ω–∞–≤—Å–µ–≥–¥–∞. –¢—ã –Ω–µ –æ–¥–∏–Ω.",
    "–¢—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à. –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å –±—ã—Ç—å –¥–æ–±—Ä—ã–º –∫ —Å–µ–±–µ.",
    "–¢–≤–æ—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ª—é–±–≤–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—à—å.",
    "–°–ª–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–µ –¥–ª—è—Ç—Å—è –≤–µ—á–Ω–æ, –Ω–æ —Å–∏–ª—å–Ω—ã–µ –ª—é–¥–∏ ‚Äî –¥–∞.",
    "–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –±—ã—Ç—å –ª—é–±–∏–º—ã–º.",
    "–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã –∏ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –ª—É—á—à–µ–µ, —á—Ç–æ –º–æ–∂–µ—à—å, –∏ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.",
    "–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å, –∏ —Å–º–µ–ª–µ–µ, —á–µ–º –≤–µ—Ä–∏—à—å.",
    "–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å —Å–æ–±–æ–π –≤—á–µ—Ä–∞—à–Ω–∏–º.",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –æ—Ç–¥—ã—Ö–∞ –∏ –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ.",
    "–¢–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞.",
    "–ö–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏.",
    "–¢—ã –Ω–µ –æ–¥–∏–Ω–æ–∫ –≤ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö.",
    "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ –¥–µ–ª–∞–µ—Ç –º–∏—Ä –ª—É—á—à–µ.",
    "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –Ω–∞ –æ—à–∏–±–∫–∏ ‚Äî –æ–Ω–∏ —É—á–∞—Ç –Ω–∞—Å.",
    "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ ‚Äî –ª—É—á—à–∏–µ –≥–ª–∞–≤—ã –≤–ø–µ—Ä–µ–¥–∏.",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ.",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —á–µ–π-—Ç–æ –¥–µ–Ω—å.",
    "–¢—ã –≤–∞–∂–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å, –∏ –Ω—É–∂–Ω–µ–µ, —á–µ–º –≤–µ—Ä–∏—à—å.",
    "–¢–≤–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫—Ä–∞—Å–æ—Ç–∞ —Å–∏—è–µ—Ç —è—Ä—á–µ –≤—Å–µ–≥–æ."
]

# –§—Ä–∞–∑—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
MOOD_MESSAGES = {
    'excellent': '–¢—ã —Å–∏—è–µ—à—å! üåü –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ ‚Äî –æ–Ω–æ —Ç–≤–æ—ë –∏ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–µ.',
    'good': '–°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ –æ—â—É—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ —Ç–≤–æ—ë. üòä',
    'ok': '–ù–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –°–¥–µ–ª–∞–π –º—è–≥–∫–∏–π –≤–¥–æ—Ö. üòê',
    'bad': '–ï—Å–ª–∏ —Ç—è–∂–µ–ª–æ ‚Äî —ç—Ç–æ –Ω–µ –Ω–∞–≤—Å–µ–≥–¥–∞. –¢—ã –Ω–µ –æ–¥–∏–Ω. üòû',
    'terrible': '–¢—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å —Ç—Ä—É–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞, –Ω–æ —Ç—ã —Å–∏–ª—å–Ω–µ–µ —ç—Ç–æ–≥–æ. üí™ –ü–æ–º–Ω–∏: —ç—Ç–æ –ø—Ä–æ–π–¥–µ—Ç.'
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
MOOD_EMOJIS = {
    'excellent': 'üåü',
    'good': 'üòä',
    'ok': 'üòê',
    'bad': 'üòû',
    'terrible': 'üò¢'
}

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API"""
    url = f"{API_URL}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    response = requests.post(url, data=data)
    return response.json()

def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API"""
    url = f"{API_URL}/editMessageText"
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    response = requests.post(url, data=data)
    return response.json()

def answer_callback_query(callback_query_id, text=None):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query"""
    url = f"{API_URL}/answerCallbackQuery"
    data = {'callback_query_id': callback_query_id}
    if text:
        data['text'] = text
    
    response = requests.post(url, data=data)
    return response.json()

def get_updates(offset=None):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    url = f"{API_URL}/getUpdates"
    params = {'timeout': 30}
    if offset:
        params['offset'] = offset
    
    response = requests.get(url, params=params)
    return response.json()

def handle_start(update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    user = update['message']['from']
    bot.create_user(user['id'], user.get('username'), user.get('first_name'), user.get('last_name'))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = bot.get_user(user['id'])
    streak = user_info['streak_days'] if user_info else 0
    
    # –ì–ª–∞–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏–∑ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    main_phrase = "–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ ‚Äî –ø—Ä–æ—Å–Ω—É–ª—Å—è. –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –¥–µ—Ç–∞–ª–∏."
    
    welcome_text = f"""
ü§ç –ü—Ä–∏–≤–µ—Ç, {user['first_name']}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Warmly ‚Äî —Ç–≤–æ—ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à. –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å.

üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!

{main_phrase}

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:
    """
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üòä –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', 'callback_data': 'mood'}],
            [{'text': 'üíù –ú–æ—Ç–∏–≤–∞—Ü–∏—è', 'callback_data': 'motivation'}],
            [{'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'stats'}],
            [{'text': 'üìö –ú–æ–π –∞—Ä—Ö–∏–≤', 'callback_data': 'archive'}],
            [{'text': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data': 'settings'}]
        ]
    }
    
    send_message(user['id'], welcome_text, keyboard)

def handle_callback_query(update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query"""
    query = update['callback_query']
    user_id = query['from']['id']
    data = query['data']
    message_id = query['message']['message_id']
    chat_id = query['message']['chat']['id']
    
    if data == "mood":
        show_mood_menu(chat_id, message_id)
    elif data == "motivation":
        show_motivation(chat_id, message_id)
    elif data == "archive":
        show_archive(chat_id, message_id, user_id)
    elif data == "stats":
        show_stats(chat_id, message_id, user_id)
    elif data == "settings":
        show_settings(chat_id, message_id, user_id)
    elif data.startswith("mood_"):
        mood = data.split("_")[1]
        handle_mood_selection(chat_id, message_id, user_id, mood)
    elif data == "back_to_main":
        show_main_menu(chat_id, message_id, user_id)
    elif data.startswith("save_"):
        handle_save_callback(user_id, data, query['id'])

def show_mood_menu(chat_id, message_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    text = "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è? –í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üåü –û—Ç–ª–∏—á–Ω–æ', 'callback_data': 'mood_excellent'}],
            [{'text': 'üòä –•–æ—Ä–æ—à–æ', 'callback_data': 'mood_good'}],
            [{'text': 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ', 'callback_data': 'mood_ok'}],
            [{'text': 'üòû –ü–ª–æ—Ö–æ', 'callback_data': 'mood_bad'}],
            [{'text': 'üò¢ –û—á–µ–Ω—å –ø–ª–æ—Ö–æ', 'callback_data': 'mood_terrible'}],
            [{'text': '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É', 'callback_data': 'custom_mood'}],
            [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
        ]
    }
    edit_message(chat_id, message_id, text, keyboard)

def handle_mood_selection(chat_id, message_id, user_id, mood):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    message = MOOD_MESSAGES.get(mood, "")
    emoji = MOOD_EMOJIS.get(mood, "üòä")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    bot.save_mood(user_id, mood, message)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
    user_info = bot.get_user(user_id)
    streak = user_info['streak_days'] if user_info else 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üíù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤', 'callback_data': f'save_{mood}'}],
            [{'text': 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'callback_data': 'stats'}],
            [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
        ]
    }
    
    response_text = f"{emoji} {message}\n\n"
    if streak > 1:
        response_text += f"üî• –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!\n\n"
    response_text += "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! üíï"
    
    edit_message(chat_id, message_id, response_text, keyboard)

def show_motivation(chat_id, message_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    phrase = random.choice(MOTIVATIONAL_PHRASES)
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üíù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤', 'callback_data': f'save_phrase_{phrase[:20]}...'}],
            [{'text': 'üîÑ –î—Ä—É–≥–∞—è —Ñ—Ä–∞–∑–∞', 'callback_data': 'motivation'}],
            [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
        ]
    }
    
    edit_message(chat_id, message_id, f"üíù {phrase}", keyboard)

def show_archive(chat_id, message_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    favorites = bot.get_favorites(user_id)
    
    if not favorites:
        text = "üìö –¢–≤–æ–π –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç.\n\n–°–æ—Ö—Ä–∞–Ω—è–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ñ—Ä–∞–∑—ã, –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É 'üíù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤'"
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
            ]
        }
    else:
        text = f"üìö –¢–≤–æ–π –∞—Ä—Ö–∏–≤ ({len(favorites)} —Ñ—Ä–∞–∑):\n\n"
        for i, phrase in enumerate(favorites[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            text += f"{i}. {phrase}\n\n"
        
        if len(favorites) > 10:
            text += f"... –∏ –µ—â—ë {len(favorites) - 10} —Ñ—Ä–∞–∑"
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
            ]
        }
    
    edit_message(chat_id, message_id, text, keyboard)

def show_stats(chat_id, message_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    stats = bot.get_mood_stats(user_id)
    user_info = bot.get_user(user_id)
    
    streak = user_info['streak_days'] if user_info else 0
    
    text = f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {stats['days']} –¥–Ω–µ–π:\n\n"
    text += f"üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"
    text += f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_moods']}\n\n"
    
    if stats['mood_stats']:
        text += "üìà –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:\n"
        for mood, count in stats['mood_stats'].items():
            emoji = MOOD_EMOJIS.get(mood, "üòä")
            text += f"{emoji} {mood.capitalize()}: {count} —Ä–∞–∑\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –ù–∞—á–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å! üòä"
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
        ]
    }
    edit_message(chat_id, message_id, text, keyboard)

def show_settings(chat_id, message_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    user = bot.get_user(user_id)
    alarm_status = "–≤–∫–ª—é—á–µ–Ω—ã" if user and user['alarm_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    
    text = f"""
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üïê –ë—É–¥–∏–ª—å–Ω–∏–∫: {alarm_status}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user['timezone'] if user else 'Europe/Moscow'}
‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user['alarm_time'] if user else '07:30'}
üåê –Ø–∑—ã–∫: {user['language'] if user else 'ru'}

–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... üöß
    """
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
        ]
    }
    edit_message(chat_id, message_id, text, keyboard)

def show_main_menu(chat_id, message_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    user_info = bot.get_user(user_id)
    streak = user_info['streak_days'] if user_info else 0
    
    text = f"""
ü§ç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:
    """
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üòä –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', 'callback_data': 'mood'}],
            [{'text': 'üíù –ú–æ—Ç–∏–≤–∞—Ü–∏—è', 'callback_data': 'motivation'}],
            [{'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'stats'}],
            [{'text': 'üìö –ú–æ–π –∞—Ä—Ö–∏–≤', 'callback_data': 'archive'}],
            [{'text': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data': 'settings'}]
        ]
    }
    edit_message(chat_id, message_id, text, keyboard)

def handle_save_callback(user_id, data, callback_query_id):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    if data.startswith("save_phrase_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—É –∏–∑ callback_data (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        phrase = "–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ ‚Äî –ø—Ä–æ—Å–Ω—É–ª—Å—è. –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –¥–µ—Ç–∞–ª–∏."
        bot.save_favorite(user_id, phrase)
        answer_callback_query(callback_query_id, "üíù –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤!")
    elif data.startswith("save_"):
        mood = data.split("_")[1]
        message = MOOD_MESSAGES.get(mood, "")
        bot.save_favorite(user_id, message)
        answer_callback_query(callback_query_id, "üíù –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤!")

def handle_help(update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    help_text = """
ü§ç Warmly Bot - –ü–æ–º–æ—â—å

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/motivation - –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/archive - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤

–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Ç—ë–ø–ª—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –í–∏–¥–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start –∏ –Ω–∞—á–Ω–∏! üíï
    """
    send_message(update['message']['from']['id'], help_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Correct Warmly Bot...")
    print("ü§ç Warmly Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    print("üîó –¢–æ–∫–µ–Ω –±–æ—Ç–∞:", BOT_TOKEN[:10] + "...")
    print("‚ú® –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!")
    
    offset = None
    
    while True:
        try:
            updates = get_updates(offset)
            
            if updates['ok']:
                for update in updates['result']:
                    offset = update['update_id'] + 1
                    
                    if 'message' in update:
                        message = update['message']
                        if 'text' in message:
                            text = message['text']
                            if text.startswith('/start'):
                                handle_start(update)
                            elif text.startswith('/help'):
                                handle_help(update)
                    
                    elif 'callback_query' in update:
                        handle_callback_query(update)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            continue

if __name__ == '__main__':
    main()